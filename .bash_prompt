# Symbols
: ${is_a_git_repo_symbol:='❤'}
: ${has_untracked_files_symbol:='∿'}
: ${has_adds_symbol:='+'}
: ${has_deletions_symbol:='-'}
: ${has_deletions_cached_symbol:='✖'}
: ${has_modifications_symbol:='✎'}
: ${has_modifications_cached_symbol:='☲'}
: ${ready_to_commit_symbol:='→'}
: ${is_on_a_tag_symbol:='⌫'}
: ${needs_to_merge_symbol:='ᄉ'}
: ${has_upstream_symbol:='⇅'}
: ${detached_symbol:='⚯ '}
: ${can_fast_forward_symbol:='»'}
: ${has_diverged_symbol:='Ⴤ'}
: ${rebase_tracking_branch_symbol:='↶'}
: ${merge_tracking_branch_symbol:='ᄉ'}
: ${should_push_symbol:='↑'}
: ${has_stashes_symbol:='★'}

# Flags
: ${display_has_upstream:=false}
: ${display_tag:=false}
: ${display_tag_name:=true}
: ${two_lines:=true}
: ${finally:=" ∙ "}
: ${use_color_off:=false}

# Colors
: ${on:=$'\e[0;37m'}
: ${off:=$'\e[1;30m'}
: ${red:=$'\e[0;31m'}
: ${green:=$'\e[0;32m'}
: ${yellow:=$'\e[0;33m'}
: ${violet:=$'\e[0;35m'}
: ${branch_color:=$'\e[0;34m'}
#: ${blinking:=$'\e[1;5;17m'}
: ${reset:=$'\e[0m'}

function enrich {
	local flag=$1
	local symbol=$2
	local color=$on
	if [[ -n $3 ]]; then color=$3; fi
	if [[ $flag != true ]]; then color=$off; fi
	if [[ $use_color_off != true && $flag != true ]]; then symbol=' '; fi
	echo -n "${color}${symbol}${reset} "
}

function build_prompt {
	local prompt=""

	# Git info
	local current_commit_hash=$(git rev-parse HEAD 2> /dev/null)
	local is_a_git_repo=false
	if [[ -n $current_commit_hash ]]; then is_a_git_repo=true; fi

	if [[ $is_a_git_repo == true ]]; then
		local current_branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
		local detached=false
		if [[ $current_branch == 'HEAD' ]]; then detached=true; fi

		local number_of_logs=$(git log --pretty=oneline -n1 2> /dev/null | wc -l)
		if [[ $number_of_logs -eq 0 ]]; then
			local just_init=true
		else
			local upstream=$(git rev-parse --symbolic-full-name --abbrev-ref @{upstream} 2> /dev/null)
			local has_upstream=false
			if [[ -n $upstream ]]; then has_upstream=true; fi

			local git_status=$(git status --porcelain 2> /dev/null)

			local has_modifications=false
			if [[ $git_status =~ ($'\n'|^).M ]]; then has_modifications=true; fi

			local has_modifications_cached=false
			if [[ $git_status =~ ($'\n'|^)M ]]; then has_modifications_cached=true; fi

			local has_adds=false
			if [[ $git_status =~ ($'\n'|^)A ]]; then has_adds=true; fi

			local has_deletions=false
			if [[ $git_status =~ ($'\n'|^).D ]]; then has_deletions=true; fi

			local has_deletions_cached=false
			if [[ $git_status =~ ($'\n'|^)D ]]; then has_deletions_cached=true; fi

			local ready_to_commit=false
			if [[ $git_status =~ ($'\n'|^)[MAD] && ! $git_status =~ ($'\n'|^).[MAD\?] ]]; then ready_to_commit=true; fi

			local has_untracked_files=false
			if [[ $git_status =~ ($'\n'|^)[\?]{2} ]]; then has_untracked_files=true; fi

			local tag_at_current_commit=$(git describe --exact-match --tags $current_commit_hash 2> /dev/null)
			local is_on_a_tag=false
			if [[ -n $tag_at_current_commit ]]; then is_on_a_tag=true; fi

			if [[ $has_upstream == true ]]; then
				local commits_diff=$(git log --pretty=oneline --topo-order --left-right ${current_commit_hash}...${upstream} 2> /dev/null)
				local commits_ahead=$(grep -c ^\< <<< "$commits_diff")
				local commits_behind=$(grep -c ^\> <<< "$commits_diff")
			fi

			local has_diverged=false
			if [[ $commits_ahead -gt 0 && $commits_behind -gt 0 ]]; then has_diverged=true; fi

			local can_fast_forward=false
			if [[ $commits_ahead -eq 0 && $commits_behind -gt 0 ]]; then can_fast_forward=true; fi

			local will_rebase=$(git config --get branch.${current_branch}.rebase 2> /dev/null)

			local has_stashes=false
			if [[ -f "${GIT_DIR:-.git}/refs/stash" ]]; then
				local number_of_stashes=$(wc -l 2> /dev/null < ${GIT_DIR:-.git}/refs/stash)
				if [[ $number_of_stashes -gt 0 ]]; then has_stashes=true; fi
			fi
		fi
	fi

	if [[ $is_a_git_repo == true ]]; then
		prompt+=$(enrich $is_a_git_repo $is_a_git_repo_symbol $violet)
		prompt+=$(enrich $has_stashes $has_stashes_symbol $yellow)
		prompt+=$(enrich $has_untracked_files $has_untracked_files_symbol $red)
		prompt+=$(enrich $has_adds $has_adds_symbol $yellow)

		prompt+=$(enrich $has_deletions $has_deletions_symbol $red)
		prompt+=$(enrich $has_deletions_cached $has_deletions_cached_symbol $yellow)

		prompt+=$(enrich $has_modifications $has_modifications_symbol $red)
		prompt+=$(enrich $has_modifications_cached $has_modifications_cached_symbol $yellow)
		prompt+=$(enrich $ready_to_commit $ready_to_commit_symbol $green)

		prompt+=$(enrich $detached $detached_symbol $red)

		if [[ $display_has_upstream == true ]]; then
			prompt+=$(enrich $has_upstream $has_upstream_symbol)
		fi
		if [[ $detached == true ]]; then
			if [[ $just_init == true ]]; then
				prompt+=" ${red}detached"
			else
				prompt+=" ${on}(${current_commit_hash:0:7})"
			fi
		else
			if [[ $has_upstream == true ]]; then
				local type_of_upstream=$merge_tracking_branch_symbol
				if [[ $will_rebase == true ]]; then type_of_upstream=$rebase_tracking_branch_symbol; fi

				if [[ $has_diverged == true ]]; then
					prompt+=" -${commits_behind} ${has_diverged_symbol} +${commits_ahead}"
				else
					if [[ $commits_behind -gt 0 ]]; then
						prompt+=$" ${on}-${commits_behind} ${can_fast_forward_symbol}"
					fi
					if [[ $commits_ahead -gt 0 ]]; then
						prompt+=$" ${on}${should_push_symbol} +${commits_ahead}"
					fi
				fi
				prompt+=" (${green}${current_branch}${reset} ${type_of_upstream} ${upstream//\/$current_branch/})"
			else
				prompt+=" ${on}(${green}${current_branch}${reset})"
			fi
		fi

		if [[ $display_tag == true && $is_on_a_tag == true ]]; then
			prompt+=" ${yellow}${is_on_a_tag_symbol}${reset}"
		fi
		if [[ $display_tag_name == true && $is_on_a_tag == true ]]; then
			prompt+=" ${yellow}[${tag_at_current_commit}]${reset}"
		fi
	fi

	break=''
	if [[ $two_lines == true && $is_a_git_repo == true ]]; then break=$'\n'; fi

	prompt+="${reset}${break}${PWD/#$HOME/~}${finally}"

	echo -n "${prompt}"
}

PS2="${yellow}→${reset} "

function prompt_command() {
	PS1=$(build_prompt)
}

[ ${ZSH_VERSION} ] && precmd() { prompt_command; }
[ ${BASH_VERSION} ] && PROMPT_COMMAND=prompt_command
